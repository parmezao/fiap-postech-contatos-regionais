
volumes:
  sqlserver_data:
  kongdata:

services: 
  api01: 
    hostname: api01
    build:
      context: .
      dockerfile: ./src/ContatosRegionais.Api/Dockerfile        
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
    depends_on:
      - db
    ports:
      - "8080:8080"

  apiqueue:  
    hostname: apiqueue
    build:
      context: .
      dockerfile: ./src/ContatosRegionais.ApiMessaging/Dockerfile        
    restart: always
    environment:
      DOTNET_SKIP_TLS: 1
      ASPNETCORE_URLS: http://+:8080
      ASPNETCORE_ENVIRONMENT: Docker
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      FUNCTION_URL: http://azure-function:80/api/GetAllContacts   # URL da Function dentro da rede Docker- 
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8084:8080"
    expose:
      - "8080"  # Porta interna (para comunicação dentro da rede Docker)        
    networks:
      - default
      - function-net
 
  azure-function:
    image: azure-function:latest
    build:
      context: .
      dockerfile: ./src/ContatosRegionais.ContatosFunction/Dockerfile
    depends_on:
      - apiqueue
    ports:
      - "7071:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/GetAllContacts"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s 
    environment:
      DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER: 0
      API_URL: http://apiqueue:8080/api/messaging/contato   # URL da Web API dentro da rede Docker
      TOKEN_URL: http://apiqueue:8080/api/messaging/token  
      AzureWebJobsStorage: UseDevelopmentStorage=true
      FUNCTIONS_WORKER_RUNTIME: dotnet
    networks:
      - default
      - function-net

  rabbitmq-consumer:
    container_name: rabbitmq-consumer
    hostname: rabbitmq-consumer
    build:
      context: .
      dockerfile: ./src/ContatosRegionais.Infra.Consumer/Dockerfile        
    restart: always
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8082:8080"

  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=PkjRej8@30
    ports:
      - 1433:1433
    volumes:
      - sqlserver_data:/var/opt/mssql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P PkjRej8@30 -Q 'SELECT 1' || exit 1"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692" 
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    command: >
      sh -c "
      rabbitmq-plugins enable --offline rabbitmq_prometheus &&
      rabbitmq-server"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:      
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - default

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin@123
    volumes:
      - ./grafana:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - default

  kong-database:
    image: postgres:9.6
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 3s
      retries: 5      
    ports:
      - 5432:5432
    volumes:
      - kongdata:/var/lib/postgresql/data
    networks:
      - default

  kong-migration:
    image: kong:latest
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong     
    links:
      - kong-database
    depends_on:
      kong-database:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c", "sleep 10 && kong migrations bootstrap"]      
    networks:
      - default

  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: off # Desativa o uso de PostgreSQL
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444
      KONG_PLUGINS: "bundled,rate-limiting"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml       
    ports:
      - 8000:8000
      - 8443:8443
      - 8001:8001
      - 8444:8444
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml
    links:
      - kong-database
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    networks:
      - default    

  konga:
    image: pantsel/konga
    restart: always
    container_name: konga
    depends_on:
      - kong
      - kong-database
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: kong
    ports:
      - "1337:1337"  # Interface do Konga
    networks:
      - default     

networks:
  default:
    driver: bridge
    name: tech_challenge
  function-net:
    driver: bridge  